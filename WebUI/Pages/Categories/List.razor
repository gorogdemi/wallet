@page "/categories"
@inherits CategoryBase
@inject IDialogService DialogService

<h1>Kategóriák</h1>

<FluentButton Class="mt-3 mb-3" Appearance="Appearance.Accent" OnClick="AddAsync">
    Új kategória
    <FluentIcon Icon="@Icons.Filled.Size20.AddCircle" Slot="start" Color="Color.Fill" />
</FluentButton>

<FluentCard Style="display: grid; padding: 0; min-height: 250px;" Width="100%" Height="auto">
    <FluentDataGrid Items="CategoryList" GridTemplateColumns="1fr">
        <ChildContent>
            <PropertyColumn Title="Megnevezés" Property="@(c => c.Name)" Sortable="true" Align="Align.Start" />
            <TemplateColumn Title="Művelet">
                <EditorButtons OnEdit="() => EditAsync(context)" OnDelete="() => DeleteAsync(context)" />
            </TemplateColumn>
        </ChildContent>
        <EmptyContent>
            @if (IsLoading)
            {
                <FluentProgressRing />
            }
            else
            {
                <div>Nincs megjeleníthető adat.</div>
            }
        </EmptyContent>
    </FluentDataGrid>
</FluentCard>

@code {

    private IQueryable<CategoryDto> CategoryList => ViewModel?.AsQueryable();

    protected override Task SetViewModelAsync() => LoadCategoriesAsync();

    private async Task AddAsync() => await HandleDialogAsync(null, new CategoryRequest());

    private async Task EditAsync(CategoryDto category) => await HandleDialogAsync(category.Id, new CategoryRequest { Name = category.Name });

    private async Task HandleDialogAsync(long? id, CategoryRequest categoryRequest)
    {
        var isEdit = id.HasValue;

        DialogParameters parameters = new()
        {
            Title = $"Kategória {(isEdit ? "módosítás" : "létrehozás")}",
            Width = "500px",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true,
        };

        var dialog = await DialogService.ShowDialogAsync<CategoryFormDialog>(categoryRequest, parameters);
        var result = await dialog.Result;

        if (result.Data is not null)
        {
            var request = result.Data as CategoryRequest;

            await HandleRequestAsync(
                () => isEdit ? Service.UpdateAsync(id!.Value, request) : Service.CreateAsync(request),
                LoadCategoriesAsync);
        }
    }

    private async Task DeleteAsync(CategoryDto category)
    {
        var dialog = await DialogService.ShowConfirmationAsync("Biztosan törölni szeretné?", "Igen", "Nem", "Törlés");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await HandleRequestAsync(
                () => Service.DeleteAsync(category.Id),
                LoadCategoriesAsync);
        }
    }

    private async Task LoadCategoriesAsync() =>
        await HandleRequestAsync(
            () => Service.GetAllAsync(),
            result => ViewModel = result);

}