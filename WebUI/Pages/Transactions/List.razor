@page "/transactions"
@inherits TransactionBase<TransactionViewModel>
@attribute [Authorize]
@inject IDialogService DialogService

<h1>Transactions</h1>

<FluentButton Class="mt-3 mb-3" Appearance="Appearance.Accent" OnClick="AddAsync">
    New transaction
    <FluentIcon Icon="@Icons.Filled.Size20.AddCircle" Slot="start" Color="Color.Fill" />
</FluentButton>

<FluentCard Style="display: grid; padding: 0; min-height: 250px;" Width="100%" Height="auto">
    <FluentDataGrid Items="FilteredItems" GridTemplateColumns="0.5fr 0.2fr 0.2fr 0.2fr 0.4fr 0.2fr 0.2fr 0.2fr 0.2fr" ResizableColumns="true" Style="overflow: auto;">
        <ChildContent>
            <PropertyColumn Title="Name" Property="@(c => c.Name)" Sortable="true" Align="Align.Start" IsDefaultSortColumn="true">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch @bind-Value="_searchTerm" Autofocus="true" Placeholder="Search..." Immediate="true" ImmediateDelay="200" />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Title="Full" Property="@(c => c.SumAmount)" Format="0 Ft" Sortable="true" Align="Align.End" />
            <PropertyColumn Title="Cash" Property="@(c => c.CashAmount)" Format="0 Ft" Sortable="true" Align="Align.End" />
            <PropertyColumn Title="Bank" Property="@(c => c.BankAmount)" Format="0 Ft" Sortable="true" Align="Align.End" />
            <PropertyColumn Title="Comment" Property="@(c => c.Comment)" Sortable="true" Align="Align.Start" />
            <PropertyColumn Title="Date" Property="@(c => c.Date.ToFormattedDate())" Sortable="true" Align="Align.Start" />
            <PropertyColumn Title="Type" Property="@(c => c.Type.ToTransactionTypeText())" Sortable="true" Align="Align.Start" />
            <PropertyColumn Title="Category" Property="@(c => c.CategoryName.ToCategoryText())" Sortable="true" Align="Align.Start" />
            <TemplateColumn Title="Action" TGridItem="TransactionDto">
                <EditorButtons OnEdit="() => EditAsync(context)" OnDelete="() => DeleteAsync(context.Id)" />
            </TemplateColumn>
        </ChildContent>
        <EmptyContent>
            @if (IsLoading)
            {
                <FluentProgressRing />
            }
            else
            {
                <div>No data available.</div>
            }
        </EmptyContent>
    </FluentDataGrid>
</FluentCard>

@code {

    private string _searchTerm = string.Empty;

    private IQueryable<TransactionDto> FilteredItems => ViewModel?.Transactions.Where(x => x.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).AsQueryable();

    protected override async Task SetViewModelAsync() =>
        await HandleRequestAsync(
            () => Service.GetViewModelAsync(),
            result => ViewModel = result);

    private async Task AddAsync() => await HandleDialogAsync(null);

    private async Task EditAsync(TransactionDto transaction) => await HandleDialogAsync(transaction.Id);

    private async Task HandleDialogAsync(long? id)
    {
        var isEdit = id.HasValue;
        var formViewModel = SetFormViewModel(id, isEdit);

        DialogParameters parameters = new()
        {
            Title = $"{(isEdit ? "Edit" : "Create")} transaction",
            Width = "500px",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true,
        };

        var dialog = await DialogService.ShowDialogAsync<TransactionFormDialog>(formViewModel, parameters);
        var result = await dialog.Result;

        if (result.Data is not null)
        {
            var viewModel = result.Data as TransactionFormViewModel;
            await SaveTransactionAsync(id, viewModel, isEdit);
        }
    }

    private TransactionFormViewModel SetFormViewModel(long? id, bool isEdit)
    {
        var formViewModel = new TransactionFormViewModel
        {
            Categories = ViewModel.Categories,
        };

        if (isEdit)
        {
            var transaction = ViewModel.Transactions.Find(x => x.Id == id);
            formViewModel.Name = transaction!.Name;
            formViewModel.Comment = transaction.Comment;
            formViewModel.BankAmount = transaction.BankAmount;
            formViewModel.CashAmount = transaction.CashAmount;
            formViewModel.Date = transaction.Date;
            formViewModel.CategoryId = transaction.CategoryId?.ToString();
            formViewModel.Type = transaction.Type;
        }

        return formViewModel;
    }

    private async Task SaveTransactionAsync(long? id, TransactionFormViewModel viewModel, bool isEdit)
    {
        var request = new TransactionRequest
        {
            Name = viewModel!.Name,
            Comment = viewModel.Comment,
            BankAmount = viewModel.BankAmount,
            CashAmount = viewModel.CashAmount,
            Date = viewModel.Date,
            CategoryId = viewModel.CategoryId is not null ? Convert.ToInt64(viewModel.CategoryId) : null,
            Type = viewModel.Type,
        };

        await HandleRequestAsync(
            () => isEdit ? Service.UpdateAsync(id!.Value, request) : Service.CreateAsync(request),
            SetViewModelAsync);
    }

    private async Task DeleteAsync(long id)
    {
        var dialog = await DialogService.ShowConfirmationAsync("Are you sure about deleting the transaction?", title: "Delete transaction");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await HandleRequestAsync(
                () => Service.DeleteAsync(id),
                SetViewModelAsync);
        }
    }

}