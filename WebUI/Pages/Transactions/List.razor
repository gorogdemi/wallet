@page "/transactions"
@inherits AuthenticationAwareComponentBase<List<TransactionViewModel>>
@attribute [Authorize]

<h1>Tranzakciók</h1>

<Alert>@ErrorMessage</Alert>

<FluentButton Appearance="Appearance.Accent" @onclick="@(() => NavigationManager.NavigateTo("transactions/create"))">
    Új
    <FluentIcon Icon="@Icons.Filled.Size20.AddCircle" Slot="start" Color="Color.Fill" />
</FluentButton>

@if (IsLoading)
{
    <div>Adatok betöltése...</div>
}
else
{
    <FluentCard Style="display: grid; min-height: 200px;">
        <FluentDataGrid Items="FilteredItems" GridTemplateColumns="0.5fr 0.2fr 0.2fr 0.2fr 0.4fr 0.2fr 0.2fr 0.2fr 0.2fr" ResizableColumns="true" Style="overflow: auto;">
            <PropertyColumn Title="Megnevezés" Property="@(c => c.Name)" Sortable="true" Align="Align.Start" IsDefaultSortColumn="true">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch Autofocus="true" @oninput="HandleFilter" AfterBindValue="HandleClear" Placeholder="Keresés..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Title="Teljes" Property="@(c => c.SumAmount)" Format="0 Ft" Sortable="true" Align="Align.End" />
            <PropertyColumn Title="Készpénz" Property="@(c => c.CashAmount)" Format="0 Ft" Sortable="true" Align="Align.End" />
            <PropertyColumn Title="Bank" Property="@(c => c.BankAmount)" Format="0 Ft" Sortable="true" Align="Align.End" />
            <PropertyColumn Title="Komment" Property="@(c => c.Comment)" Sortable="true" Align="Align.Start" />
            <PropertyColumn Title="Dátum" Property="@(c => c.Date.ToFormattedDate())" Sortable="true" Align="Align.Start" />
            <PropertyColumn Title="Típus" Property="@(c => c.Type.ToTransactionTypeText())" Sortable="true" Align="Align.Start" />
            <PropertyColumn Title="Kategória" Property="@(c => c.CategoryName.ToCategoryText())" Sortable="true" Align="Align.Start" />
            <TemplateColumn Title="Művelet" TGridItem="TransactionViewModel">
                <EditorButtons OnEdit="@(() => NavigationManager.NavigateTo($"transactions/edit/{context.Id}"))" OnDelete="() => DeleteAsync(context.Id)" />
            </TemplateColumn>
        </FluentDataGrid>
    </FluentCard>
}

@code {

    private string _searchTerm = string.Empty;

    private IQueryable<TransactionViewModel> FilteredItems => Data?.Where(x => x.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadTransactionsAsync();
    }

    private async Task DeleteAsync(long id)
    {
        await HandleRequestAsync(
            () => Service.DeleteAsync(UriHelper.GetTransactionUriWith(id)),
            onSuccess: async () => { await LoadTransactionsAsync(); },
            errorMessage: "Tranzakció törlése sikertelen!");
    }

    private Task LoadTransactionsAsync() =>
        HandleRequestAsync(
            () => Service.GetAsync<List<TransactionViewModel>>(UriHelper.TransactionUri),
            onSuccess: response => Data = response,
            errorMessage: "Tranzakciók betöltése sikertelen!");

    private void HandleFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            _searchTerm = value;
        }
    }

    private void HandleClear(string value) => _searchTerm = value ?? string.Empty;

}