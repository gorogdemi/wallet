@page "/transactions/edit/{TransactionId:int}"
@inherits TransactionFormComponentBase
@attribute [Authorize]

<h1>Tranzakció Módosítás</h1>

<Alert>@ErrorMessage</Alert>

@if (IsLoading)
{
    <div>Adatok betöltése...</div>
}
else
{
    <TransactionForm ViewModel="Data" Categories="Categories" OnClose="NavigateToTransactions" OnSubmit="EditAsync" />
}

@code {

    [Parameter]
    public int TransactionId { get; set; }

    private Task EditAsync()
    {
        var request = new TransactionRequest
        {
            Name = Data.Name,
            Comment = Data.Comment,
            BankAmount = Data.BankAmount,
            CashAmount = Data.CashAmount,
            Date = Data.Date,
            CategoryId = Data.CategoryId is not null ? Convert.ToInt64(Data.CategoryId) : null,
            Type = Data.Type,
        };

        return HandleRequestAsync(
            () => Service.UpdateAsync(UriHelper.GetTransactionUriWith(TransactionId), request),
            onSuccess: NavigateToTransactions,
            errorMessage: "Tranzakció módosítás sikertelen!");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await HandleRequestAsync(
            () => Service.GetAsync<TransactionViewModel>(UriHelper.GetTransactionUriWith(TransactionId)),
            onSuccess: response =>
            {
                Data.BankAmount = response.BankAmount;
                Data.CashAmount = response.CashAmount;
                Data.CategoryId = response.CategoryId.ToString();
                Data.Comment = response.Comment;
                Data.Date = response.Date;
                Data.Name = response.Name;
                Data.Type = response.Type;
            },
            errorMessage: "Tranzakció lekérés sikertelen!");
    }

}