@page "/transactions/edit/{TransactionId:int}"
@inherits TransactionFormComponentBase
@attribute [Authorize]

<h1>Tranzakció Módosítás</h1>

<Alert Message="@ErrorMessage" />

@if (IsLoading)
{
    <div>Adatok betöltése...</div>
}
else
{
    <TransactionForm Transaction="Data" Categories="Categories" OnClose="NavigateToTransactions" OnSubmit="EditAsync" />
}

@code {

    [Parameter]
    public int TransactionId { get; set; }

    private Task EditAsync() =>
        HandleRequestAsync(
            () => Service.UpdateAsync(UriHelper.GetTransactionUriWith(TransactionId), Data),
            onSuccess: NavigateToTransactions,
            errorMessage: "Tranzakció módosítás sikertelen!");

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await HandleRequestAsync(
            () => Service.GetAsync<TransactionViewModel>(UriHelper.GetTransactionUriWith(TransactionId)),
            onSuccess: response =>
            {
                Data.BankAmount = response.BankAmount;
                Data.CashAmount = response.CashAmount;
                Data.CategoryId = response.CategoryId;
                Data.Comment = response.Comment;
                Data.Date = response.Date;
                Data.Name = response.Name;
                Data.Type = response.Type;
            },
            errorMessage: "Tranzakció lekérés sikertelen!");
    }

}