@page "/categories"
@inherits AuthenticationAwareComponentBase<CategoryRequest>
@attribute [Authorize]

<h1>Kategóriák</h1>

<Alert>@ErrorMessage</Alert>

@if (IsLoading && Data is not null)
{
    <div>Adatok betöltése...</div>
}
else
{
    <CategoryRequestModal @ref="_modal" Title="@ModalTitle" Data="Data" OnSubmit="SaveAsync" />

    <FluentButton Class="mt-4 mb-3" Appearance="Appearance.Accent" @onclick="Add">
        Új kategória
        <FluentIcon Icon="@Icons.Filled.Size20.AddCircle" Slot="start" Color="Color.Fill" />
    </FluentButton>

    <div class="row">
        <FluentDataGrid Items="CategoryList" GridTemplateColumns="1fr">
            <PropertyColumn Title="Megnevezés" Property="@(c => c.Name)" Sortable="true" Align=Align.Start />
            <TemplateColumn Title="Művelet">
                <EditorButtons OnEdit="() => Edit(context)" OnDelete="() => DeleteAsync(context)" />
            </TemplateColumn>
        </FluentDataGrid>
    </div>
}

@code {

    private IEnumerable<CategoryViewModel> _categories = new List<CategoryViewModel>();
    private CategoryRequestModal _modal;
    private long? _id;

    private string ModalTitle => $"Kategória {(_id.HasValue ? "módosítás" : "létrehozás")}";

    private IQueryable<CategoryViewModel> CategoryList => _categories.AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        Data = new CategoryRequest();
        await base.OnInitializedAsync();
        await LoadCategoriesAsync();
    }

    private void Add()
    {
        Data = new CategoryRequest();
        _id = null;
        _modal.Open();
    }

    private async Task DeleteAsync(CategoryViewModel category)
    {
        await HandleRequestAsync(
            () => Service.DeleteAsync(UriHelper.GetCategoryUriWith(category.Id)),
            onSuccess: LoadCategoriesAsync,
            errorMessage: "Hiba a kategória törlése közben!");
    }

    private async Task LoadCategoriesAsync()
    {
        await HandleRequestAsync(
            () => Service.GetAsync<List<CategoryViewModel>>(UriHelper.CategoryUri),
            onSuccess: r => _categories = r,
            errorMessage: "Kategóriák betöltése sikertelen!");
    }

    private void Edit(CategoryViewModel category)
    {
        Data = new CategoryRequest { Name = category.Name };
        _id = category.Id;
        _modal.Open();
    }

    private async Task SaveAsync()
    {
        var isEdit = _id.HasValue;

        await HandleRequestAsync(
            () => isEdit ? Service.UpdateAsync(UriHelper.GetCategoryUriWith(_id!.Value), Data) : Service.CreateAsync(UriHelper.CategoryUri, Data),
            onSuccess: LoadCategoriesAsync,
            errorMessage: $"Hiba a kategória {(isEdit ? "módosítása" : "létrehozása")} közben!");
    }

}