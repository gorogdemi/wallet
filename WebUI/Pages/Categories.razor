@page "/categories"
@inherits AuthenticationAwareComponentBase<CategoryRequest>
@attribute [Authorize]

<h1>Kategóriák</h1>

<Alert Message="@ErrorMessage" />

@if (IsLoading)
{
    <div>Adatok betöltése...</div>
}
else
{
    <CategoryRequestModal @ref="                _modal" Title="@ModalTitle" Category="Data" OnSubmit="SaveAsync" />

    <FluentDialog @ref="                MyFluentDialog" Hidden="_isDialogHidden" aria-label="Simple dialog" Modal="true" @ondialogdismiss="() => _isDialogHidden = true">
        <h2>@ModalTitle</h2>
        <p>The 'Close dialog' button is automatically focussed.</p>
        <p>The 'Another button' doesn't do anything other than showing receiving focus.</p>
        <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="SaveAsync">Mentés</FluentButton>
        <FluentButton @onclick="() => _isDialogHidden = true">Bezárás</FluentButton>
    </FluentDialog>

    <FluentButton Class="mt-4 mb-3" Appearance="Appearance.Accent" @onclick="Add">
        <i class="bi bi-plus-circle"></i>
        Új kategória
    </FluentButton>

    <div class="row">
        <FluentDataGrid id="manualGrid" RowsData=@CategoryList GridTemplateColumns="1fr" TGridItem="CategoryViewModel">
            <PropertyColumn Title="Name" Property="@(c => c.Name)" Sortable="true" Align=Align.Left />
            <TemplateColumn>
                <FluentButton Appearance="Appearance.Neutral" @onclick="@(() => Edit(context))">
                    <i class="bi bi-pencil"></i>
                </FluentButton>
                <FluentButton Appearance="Appearance.Neutral" @onclick="@(() => DeleteAsync(context))">
                    <i class="bi bi-trash"></i>
                </FluentButton>
            </TemplateColumn>
        </FluentDataGrid>
    </div>
}

@code {

    private IEnumerable<CategoryViewModel> _categories = new List<CategoryViewModel>();
    private CategoryRequestModal _modal;
    private long? _id;
    private FluentDialog MyFluentDialog;
    private bool _isDialogHidden = true;

    private string ModalTitle => $"Kategória {(_id.HasValue ? "módosítás" : "létrehozás")}";

    private IQueryable<CategoryViewModel> CategoryList => _categories.AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        Data = new CategoryRequest();
        await base.OnInitializedAsync();
        await LoadCategoriesAsync();
    }

    private void Add()
    {
        Data = new CategoryRequest();
        _id = null;
        _isDialogHidden = false;
    }

    private async Task DeleteAsync(CategoryViewModel category)
    {
        await HandleRequestAsync(
            () => Service.DeleteAsync(UriHelper.GetCategoryUriWith(category.Id)),
            onSuccess: LoadCategoriesAsync,
            errorMessage: "Hiba a kategória törlése közben!");
    }

    private async Task LoadCategoriesAsync()
    {
        await HandleRequestAsync(
            () => Service.GetAsync<List<CategoryViewModel>>(UriHelper.CategoryUri),
            onSuccess: r => _categories = r,
            errorMessage: "Kategóriák betöltése sikertelen!");
    }

    private void Edit(CategoryViewModel category)
    {
        Data = new CategoryRequest { Name = category.Name };
        _id = category.Id;
        _isDialogHidden = false;
    }

    private async Task SaveAsync()
    {
        var isEdit = _id.HasValue;

        await HandleRequestAsync(
            () => isEdit ? Service.UpdateAsync(UriHelper.GetCategoryUriWith(_id!.Value), Data) : Service.CreateAsync(UriHelper.CategoryUri, Data),
            onSuccess: LoadCategoriesAsync,
            errorMessage: $"Hiba a kategória {(isEdit ? "módosítása" : "létrehozása")} közben!");
    }

}