@page "/register"
@inherits WalletComponentBase<DevQuarter.Wallet.Application.Authentication.RegistrationRequest, IAuthenticationService>

<h1>Regisztráció</h1>

<Alert>@ErrorMessage</Alert>

<EditForm Model="Data" OnValidSubmit="RegisterAsync" class="card card-body bg-light mt-5">
    <FluentValidationValidator />

    <FormInput ValidationFor="() => Data.UserName">
        <FluentTextField @bind-Value="Data.UserName">Név:</FluentTextField>
    </FormInput>

    <FormInput ValidationFor="() => Data.LastName">
        <FluentTextField @bind-Value="Data.LastName">Vezetéknév:</FluentTextField>
    </FormInput>

    <FormInput ValidationFor="() => Data.FirstName">
        <FluentTextField @bind-Value="Data.FirstName">Keresztnév:</FluentTextField>
    </FormInput>

    <FormInput ValidationFor="() => Data.Email">
        <FluentTextField TextFieldType="TextFieldType.Email" @bind-Value="Data.Email">E-mail cím:</FluentTextField>
    </FormInput>

    <FormInput ValidationFor="() => Data.EmailConfirm">
        <FluentTextField TextFieldType="TextFieldType.Email" @bind-Value="Data.EmailConfirm">Email cím megerősítése:</FluentTextField>
    </FormInput>

    <FormInput ValidationFor="() => Data.Password">
        <FluentTextField TextFieldType="TextFieldType.Password" @bind-Value="Data.Password">Jelszó:</FluentTextField>
    </FormInput>

    <FormInput ValidationFor="() => Data.Password">
        <FluentTextField TextFieldType="TextFieldType.Password" @bind-Value="Data.Password">Jelszó megerősítése:</FluentTextField>
    </FormInput>

    <FormSubmit Title="Regisztráció" />
</EditForm>

@code {

    private async Task RegisterAsync()
    {
        await HandleRequestAsync(
            () => Service.RegisterAsync(Data),
            onSuccess: () => NavigationManager.NavigateTo("/"),
            errorMessage: "Regisztráció sikertelen!");
    }

}