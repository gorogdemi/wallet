@inherits EditDialog<TransactionRequest>

<EditForm EditContext="_editContext" OnSubmit="SubmitAsync">
    <FluentValidationValidator />

    <FormInput ValidationFor="() => ViewModel.Name">
        <FluentTextField @bind-Value="ViewModel.Name">Megnevezés:</FluentTextField>
    </FormInput>

    <FormInput ValidationFor="() => ViewModel.BankAmount">
        <FluentNumberField @bind-Value="ViewModel.BankAmount">Bank:</FluentNumberField>
    </FormInput>

    <FormInput ValidationFor="() => ViewModel.CashAmount">
        <FluentNumberField @bind-Value="ViewModel.CashAmount">Készpénz:</FluentNumberField>
    </FormInput>

    <FormInput ValidationFor="() => ViewModel.Comment">
        <FluentTextField @bind-Value="ViewModel.Comment">Megjegyzés:</FluentTextField>
    </FormInput>

    <FormInput ValidationFor="() => ViewModel.Date">
        <FluentDatePicker @bind-Value="ViewModel.Date" Label="Dátum:" />
    </FormInput>

    <FormInput ValidationFor="() => ViewModel.Type">
        <FluentSelect @bind-SelectedOption="ViewModel.Type" Label="Típus:" Items="_transactionTypes" OptionText="type => type.ToTransactionTypeText()" />
    </FormInput>

    <FormInput ValidationFor="() => ViewModel.CategoryId">
        <FluentSelect
            @bind-Value="ViewModel.CategoryId"
            Label="Kategória:"
            Items="_categoryList"
            OptionText="option => option?.Name.ToCategoryText()"
            OptionValue="option => option?.Id.ToString()" />
    </FormInput>

    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Class="mt-5">Küldés</FluentButton>
    <FluentButton @onclick="OnClose">Mégsem</FluentButton>
</EditForm>

@code {

    private EditContext _editContext;
    private List<TransactionType?> _transactionTypes;
    private List<CategoryViewModel> _categoryList;

    [Parameter]
    public IEnumerable<CategoryViewModel> Categories { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public TransactionFormViewModel ViewModel { get; set; }

    protected override void OnInitialized()
    {
        ViewModel.Type = TransactionType.Expense;
        ViewModel.Date = DateTime.Now;

        _transactionTypes = Enum.GetValues<TransactionType>().Cast<TransactionType?>().ToList();
        _categoryList = Categories.ToList();
        _categoryList.Insert(0, new CategoryViewModel { Id = -1, Name = "Nincs" });

        _editContext = new EditContext(ViewModel);
    }

    private async Task SubmitAsync()
    {
        if (!_editContext.Validate())
        {
            return;
        }

        if (ViewModel.CategoryId == "-1")
        {
            ViewModel.CategoryId = null;
        }

        await OnSubmit.InvokeAsync();
    }

}