@page "/register"
@inherits WalletComponentBase<RegistrationRequest, IAuthenticationService>

<h1>Regisztráció</h1>

<Alert Message="@ErrorMessage" />

<EditForm EditContext="_editContext" OnValidSubmit="RegisterAsync" class="card card-body bg-light mt-5">
    <FluentValidationValidator />

    <FormInput For="username" Label="Felhasználónév" ValidationFor="() => Data.UserName">
        <InputText id="username" class="form-control" @bind-Value="Data.UserName" />
    </FormInput>

    <FormInput For="last-name" Label="Vezetéknév" ValidationFor="() => Data.FirstName">
        <InputText id="last-name" class="form-control" @bind-Value="Data.FirstName" />
    </FormInput>

    <FormInput For="first-name" Label="Keresztnév" ValidationFor="() => Data.LastName">
        <InputText id="first-name" class="form-control" @bind-Value="Data.LastName" />
    </FormInput>

    <FormInput For="email" Label="Email cím" ValidationFor="() => Data.Email">
        <InputText id="email" type="email" class="form-control" @bind-Value="Data.Email" />
    </FormInput>

    <FormInput For="email-confirm" Label="Email cím megerősítése" ValidationFor="() => Data.EmailConfirm">
        <InputText id="email-confirm" type="email" class="form-control" @bind-Value="Data.EmailConfirm" />
    </FormInput>

    <FormInput For="password" Label="Jelszó" ValidationFor="() => Data.Password">
        <InputText id="password" type="password" class="form-control" @bind-Value="Data.Password" />
    </FormInput>

    <FormInput For="password-confirm" Label="Jelszó megerősítése" ValidationFor="() => Data.PasswordConfirm">
        <InputText id="password-confirm" type="password" class="form-control" @bind-Value="Data.PasswordConfirm" />
    </FormInput>

    <div class="row">
        <div class="col-md-12 text-center">
            <button type="submit" class="btn btn-primary">Regisztráció</button>
        </div>
    </div>
</EditForm>

@code {

    private EditContext _editContext;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _editContext = new EditContext(Data);
        _editContext.SetFieldCssClassProvider(new CustomFieldClassProvider());
    }

    private async Task RegisterAsync()
    {
        await HandleRequest(
            () => Service.RegisterAsync(Data),
            onSuccess: () => NavigationManager.NavigateTo("/"),
            errorMessage: "Regisztráció sikertelen!");
    }

}