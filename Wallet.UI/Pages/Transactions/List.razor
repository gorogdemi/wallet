@page "/transactions"
@inherits AuthenticationAwareComponentBase<List<TransactionResponse>>
@attribute [Authorize]

<h1>Tranzakciók</h1>

<Alert Message="@ErrorMessage" />

<div class="input-group mt-4 mb-3">
    <a href="transactions/create" class="btn btn-primary">
        <i class="bi bi-plus-circle"></i> Új
    </a>
    <input type="text" class="form-control" placeholder="Írja be a tranzakció nevét.." @oninput="@_searchTerm.OnNext">
</div>

@if (IsLoading)
{
    <div>Adatok betöltése...</div>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Név</th>
            <th>Teljes</th>
            <th>Készpénz</th>
            <th>Bankszámla</th>
            <th>Komment</th>
            <th>Dátum</th>
            <th>Típus</th>
            <th>Kategória</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var transaction in Data)
        {
            <tr>
                <td>@transaction.Name</td>
                <td>@transaction.SumAmount Ft</td>
                <td>@transaction.CashAmount Ft</td>
                <td>@transaction.BankAmount Ft</td>
                <td>@transaction.Comment</td>
                <td>@transaction.Date.ToFormattedDate()</td>
                <td>@transaction.Type.ToTransactionTypeText()</td>
                <td>@(GetCategoryName(transaction.CategoryId))</td>
                <td>
                    <a href="@($"transactions/edit/{transaction.Id}")" class="btn btn-primary table-btn">
                        <i class="bi bi-pencil"></i>
                    </a>
                    <button @onclick="() => DeleteAsync(transaction.Id)" class="btn btn-danger table-btn">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    private IEnumerable<CategoryResponse> _categories = new List<CategoryResponse>();
    private readonly Subject<ChangeEventArgs> _searchTerm = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadCategoriesAsync();
        await LoadTransactionsAsync();

        _searchTerm
            .Throttle(TimeSpan.FromMilliseconds(200))
            .Select(e => (string)e.Value)
            .Select(v => v?.Trim())
            .DistinctUntilChanged()
            .SelectMany(SearchTransactions)
            .Subscribe(r =>
            {
                ErrorMessage = null;

                try
                {
                    Data = r;
                    StateHasChanged();
                }
                catch
                {
                    ErrorMessage = "Tranzakciók betöltése sikertelen!";
                }
            });
    }

    private string GetCategoryName(long? id) => _categories?.FirstOrDefault(c => c.Id == id)?.Name ?? "Nincs";

    private async Task DeleteAsync(long id)
    {
        await HandleRequest(
            () => Service.DeleteAsync(UriHelper.GetTransactionUriWith(id)),
            onSuccess: async () =>
            {
                await LoadCategoriesAsync();
                await LoadTransactionsAsync();
            },
            errorMessage: "Tranzakció törlése sikertelen!");
    }

    private async Task LoadCategoriesAsync()
    {
        await HandleRequest(
            () => Service.GetAsync<List<CategoryResponse>>(UriHelper.CategoryUri),
            onSuccess: r => _categories = r,
            errorMessage: "Kategóriák betöltése sikertelen!");
    }

    private Task<List<TransactionResponse>> SearchTransactions(string searchTerm = null)
        => Service.GetAsync<List<TransactionResponse>>(string.IsNullOrEmpty(searchTerm) ? UriHelper.TransactionUri : UriHelper.GetTransactionUriWith(searchTerm));

    private Task LoadTransactionsAsync() =>
        HandleRequest(
            () => Service.GetAsync<List<TransactionResponse>>(UriHelper.TransactionUri),
            onSuccess: response => Data = response,
            errorMessage: "Tranzakciók betöltése sikertelen!");

}